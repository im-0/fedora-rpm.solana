From c421fd728092a129d4f554a5fad6155af48c7cfb Mon Sep 17 00:00:00 2001
From: Ivan Mironov <mironov.ivan@gmail.com>
Date: Thu, 25 Aug 2022 07:45:47 +0500
Subject: [PATCH 2/4] Add a builder for an HttpSender to support more client
 options

---
 client/src/http_sender.rs | 71 +++++++++++++++++++++++++++------------
 1 file changed, 50 insertions(+), 21 deletions(-)

diff --git a/client/src/http_sender.rs b/client/src/http_sender.rs
index 84e1418d7a0f..c9c0b23f40ca 100644
--- a/client/src/http_sender.rs
+++ b/client/src/http_sender.rs
@@ -25,27 +25,27 @@ use {
     tokio::time::sleep,
 };
 
-pub struct HttpSender {
-    client: Arc<reqwest::Client>,
+/// Builder for an [`HttpSender`].
+#[derive(Debug, Clone)]
+pub struct HttpSenderBuilder {
     url: String,
-    request_id: AtomicU64,
-    stats: RwLock<RpcTransportStats>,
+    timeout: Duration,
 }
 
-/// Nonblocking [`RpcSender`] over HTTP.
-impl HttpSender {
-    /// Create an HTTP RPC sender.
+impl HttpSenderBuilder {
+    /// Create a builder to configure an HTTP RPC sender.
     ///
     /// The URL is an HTTP URL, usually for port 8899, as in
     /// "http://localhost:8899". The sender has a default timeout of 30 seconds.
     pub fn new<U: ToString>(url: U) -> Self {
-        Self::new_with_timeout(url, Duration::from_secs(30))
+        Self {
+            url: url.to_string(),
+            timeout: Duration::from_secs(30),
+        }
     }
 
-    /// Create an HTTP RPC sender.
-    ///
-    /// The URL is an HTTP URL, usually for port 8899.
-    pub fn new_with_timeout<U: ToString>(url: U, timeout: Duration) -> Self {
+    /// Returns an [`HttpSender`] for a given configuration.
+    pub fn build(self) -> HttpSender {
         let mut default_headers = header::HeaderMap::new();
         default_headers.append(
             header::HeaderName::from_static("solana-client"),
@@ -55,21 +55,50 @@ impl HttpSender {
             .unwrap(),
         );
 
-        let client = Arc::new(
-            reqwest::Client::builder()
-                .default_headers(default_headers)
-                .timeout(timeout)
-                .build()
-                .expect("build rpc client"),
-        );
+        let reqwest_builder = reqwest::Client::builder()
+            .default_headers(default_headers)
+            .timeout(self.timeout);
 
-        Self {
+        let client = Arc::new(reqwest_builder.build().expect("build rpc client"));
+
+        HttpSender {
             client,
-            url: url.to_string(),
+            url: self.url,
             request_id: AtomicU64::new(0),
             stats: RwLock::new(RpcTransportStats::default()),
         }
     }
+
+    /// Set custom HTTP timeout. The default timeout is 30 seconds.
+    pub fn timeout(mut self, timeout: Duration) -> Self {
+        self.timeout = timeout;
+        self
+    }
+}
+
+pub struct HttpSender {
+    client: Arc<reqwest::Client>,
+    url: String,
+    request_id: AtomicU64,
+    stats: RwLock<RpcTransportStats>,
+}
+
+/// Nonblocking [`RpcSender`] over HTTP.
+impl HttpSender {
+    /// Create an HTTP RPC sender.
+    ///
+    /// The URL is an HTTP URL, usually for port 8899, as in
+    /// "http://localhost:8899". The sender has a default timeout of 30 seconds.
+    pub fn new<U: ToString>(url: U) -> Self {
+        HttpSenderBuilder::new(url).build()
+    }
+
+    /// Create an HTTP RPC sender.
+    ///
+    /// The URL is an HTTP URL, usually for port 8899.
+    pub fn new_with_timeout<U: ToString>(url: U, timeout: Duration) -> Self {
+        HttpSenderBuilder::new(url).timeout(timeout).build()
+    }
 }
 
 #[derive(Deserialize, Debug)]
-- 
2.37.2


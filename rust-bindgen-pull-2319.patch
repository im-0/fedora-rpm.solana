diff -Nru solana-1.13.7.a/vendor/bindgen/.cargo-checksum.json solana-1.13.7.b/vendor/bindgen/.cargo-checksum.json
--- solana-1.13.7.a/vendor/bindgen/.cargo-checksum.json	2023-03-30 04:41:10.000000000 +0200
+++ solana-1.13.7.b/vendor/bindgen/.cargo-checksum.json	2023-04-19 01:06:10.058579898 +0200
@@ -1 +1 @@
-{"files":{"Cargo.lock":"0422f9509d6da26290355cbd63fa2d29757aeb90707a1ed35a785edd4b7842ff","Cargo.toml":"7cea9d547137150ff4636ccbccb2bd0588e19f239128719e2177e12095d34fa6","LICENSE":"c23953d9deb0a3312dbeaf6c128a657f3591acee45067612fa68405eaa4525db","README.md":"1e108368fbf877d6a3921a17dd771dc98f8866da4280965ee44ca14b15aad9cc","build.rs":"d53484feea4cd147cd80280ac270c24ab727386acabb043e6347c44ac5369d0e","csmith-fuzzing/README.md":"7107b70fedb0c0a0cadb3c439a49c1bd0119a6d38dc63b1aecc74d1942256ef2","src/callbacks.rs":"cb4ca440e356dde75919a5298b75cbf145c981c2e1da62907337706286dd5c9e","src/clang.rs":"48acc69ae0dde8e1452a1a4acceeade7443de0cd88c2cb8ca622893dd3f7553a","src/codegen/bitfield_unit.rs":"fddeaeab5859f4e82081865595b7705f5c0774d997df95fa5c655b81b9cae125","src/codegen/bitfield_unit_tests.rs":"9df86490de5e9d66ccea583dcb686dd440375dc1a3c3cf89a89d5de3883bf28a","src/codegen/dyngen.rs":"b1bca96fbd81b1c0678122df8d28f3b60cd74047a43d0d298d69feb06eecf459","src/codegen/error.rs":"5e308b8c54b68511fc8ea2ad15ddac510172c4ff460a80a265336440b0c9653d","src/codegen/helpers.rs":"65c3e7a79f93bcfee92028f00a380e747d95f0726323e0f6a3dfb4ede8a7f1a1","src/codegen/impl_debug.rs":"871f18fc2bd7bad4ae0ce8736ac6ac196b35c72ef70cc6ad68f3e30963e634fd","src/codegen/impl_partialeq.rs":"6c745da208b18946ecde725cef482c47331a88858787f916c4cc74692e2952b7","src/codegen/mod.rs":"20db73c0f6569d9743e4de66cb0c19a3616f3737dca582b05f82e3d22c2113fa","src/codegen/struct_layout.rs":"25926bc79edaf2d432e17764eadd97c94fb46393882efe43a7e37cc6705bae75","src/deps.rs":"de4a91d1d252295e1abaf4ab1f90f7be618c67649edb12081c3a501e61398a75","src/extra_assertions.rs":"494534bd4f18b80d89b180c8a93733e6617edcf7deac413e9a73fd6e7bc9ced7","src/features.rs":"25fdcc67539d27a2664c673c8225df9da43520efcc995185f66d46bf3fc14c71","src/ir/analysis/derive.rs":"58be29c92fc7f6edd061d5ce55ad3b3efe6da70b548e78a8cdd0f30d78dabc09","src/ir/analysis/has_destructor.rs":"2b280ae2af37a9f1165e40bf091da2ff6d1fa521bad8a9dd2d6c056ab38e6e00","src/ir/analysis/has_float.rs":"58ea1e38a59ef208400fd65d426cb5b288949df2d383b3a194fa01b99d2a87fa","src/ir/analysis/has_type_param_in_array.rs":"d1b9eb119dc14f662eb9bd1394c859f485479e4912589709cdd33f6752094e22","src/ir/analysis/has_vtable.rs":"c99eb78232280a710e330c888d757cb44bcc55145a0981ed57cdd0a383700129","src/ir/analysis/mod.rs":"f3f6538daab337fd51f3073f7e4fa95d31d06716e059adf0fdc3f728abd20c30","src/ir/analysis/sizedness.rs":"0e46879a6c4b75cf3f63946bd4805d65fed24c561f86d16d0ef68fe5db42a379","src/ir/analysis/template_params.rs":"b574a329fd9b05fcf86bc857f6cadfd6ef89244007017b8f879bce6ccbf70768","src/ir/annotations.rs":"1c931d7bbba1e1613e9cccaab58d14f75e79b831b5c881e41f5b5257a9cbced7","src/ir/comment.rs":"31d64a49ae3d9c3c348fa2539e03306ca3a23fae429cab452e42b31ecf632145","src/ir/comp.rs":"4b64f4a7dc7b46fb2074f40259b059261386d0137d17374106fe6ea03c3406af","src/ir/context.rs":"82fe3effd7238a9302bc815bb25ae30eaea40ce44dcde569264bb6ee136dfd0d","src/ir/derive.rs":"e5581852eec87918901a129284b4965aefc8a19394187a8095779a084f28fabe","src/ir/dot.rs":"2d79d698e6ac59ce032840e62ff11103abed1d5e9e700cf383b492333eeebe1f","src/ir/enum_ty.rs":"5c861f09432cebf8d59f561c4c6f59cf6360b202c81e69b14fb40cb4a3716be1","src/ir/function.rs":"1e95f185f6575cf38ace614e273011ff022c45aba346a8e929d2c41a7136f212","src/ir/int.rs":"68a86182743ec338d58e42203364dc7c8970cb7ec3550433ca92f0c9489b4442","src/ir/item.rs":"05f0d441d6dac715c0c53c68dd67dfa2829027db805537ef4df888237081f403","src/ir/item_kind.rs":"7666a1ff1b8260978b790a08b4139ab56b5c65714a5652bbcec7faa7443adc36","src/ir/layout.rs":"755e3787c262de434a53a8c326f0e825f95415ed6b0f925c1cddf208ca8e3bc4","src/ir/mod.rs":"713cd537434567003197a123cbae679602c715e976d22f7b23dafd0826ea4c70","src/ir/module.rs":"70cf6ddfeabe6cdc13fdc767c783216c073404848d827e85fc6c2de3a19b5c3f","src/ir/objc.rs":"195fb2a3e4371b90244f3a8f295fd80cc77e0f2daf8fd27e3d8e5b78bd6b55d6","src/ir/template.rs":"0f19fba602f9b6a3da9a0dcd6a0653129234866d24f71c4713aad8d2e635b90f","src/ir/traversal.rs":"b1ca0cd37e02211fb6d1d13a9c8d0aa5b74f9ccfb7f5e87d86a6e1fa0fcb00e1","src/ir/ty.rs":"c2c0507e535c35cb46ed33529215f7ddd85ac35929911cf40998c3ebe59a9f68","src/ir/var.rs":"da0bc3d26d3b5da4d6cff270a98c6c14922a087f05e66b221b65848c4f6b3c5b","src/lib.rs":"c47ba40f0b6feada5d7baf091c535c19e199afc7b5346461d9eab6278220e5ab","src/log_stubs.rs":"7f33c9ea10b24f610b82ca3c2bc0f88ae9a5bf742414e6ad8b9dfea7b0b16ad9","src/main.rs":"74e582c37b146090332b1496f5b4bca02c7629d03a4ae40302cb4a723f08e445","src/options.rs":"4dff3a8e1d039c6f53a20141adf1ed86fba4049ce89d39d4897966ec11b18101","src/parse.rs":"4ffc54415eadb622ee488603862788c78361ef2c889de25259441a340c2a010f","src/regex_set.rs":"6c46357fb1ee68250e5e017cbf691f340041489ae78599eee7a5665a6ddce27f","src/time.rs":"8efe317e7c6b5ba8e0865ce7b49ca775ee8a02590f4241ef62f647fa3c22b68e"},"package":"453c49e5950bb0eb63bb3df640e31618846c89d5b7faa54040d76e98e0134375"}
\ No newline at end of file
+{"files":{"Cargo.lock":"0422f9509d6da26290355cbd63fa2d29757aeb90707a1ed35a785edd4b7842ff","Cargo.toml":"7cea9d547137150ff4636ccbccb2bd0588e19f239128719e2177e12095d34fa6","LICENSE":"c23953d9deb0a3312dbeaf6c128a657f3591acee45067612fa68405eaa4525db","README.md":"1e108368fbf877d6a3921a17dd771dc98f8866da4280965ee44ca14b15aad9cc","build.rs":"d53484feea4cd147cd80280ac270c24ab727386acabb043e6347c44ac5369d0e","csmith-fuzzing/README.md":"7107b70fedb0c0a0cadb3c439a49c1bd0119a6d38dc63b1aecc74d1942256ef2","src/callbacks.rs":"cb4ca440e356dde75919a5298b75cbf145c981c2e1da62907337706286dd5c9e","src/clang.rs":"4844224234cecd01b13c1111070aa327c01f6680ad95182fe18fea0bb65c0254","src/codegen/bitfield_unit.rs":"fddeaeab5859f4e82081865595b7705f5c0774d997df95fa5c655b81b9cae125","src/codegen/bitfield_unit_tests.rs":"9df86490de5e9d66ccea583dcb686dd440375dc1a3c3cf89a89d5de3883bf28a","src/codegen/dyngen.rs":"b1bca96fbd81b1c0678122df8d28f3b60cd74047a43d0d298d69feb06eecf459","src/codegen/error.rs":"5e308b8c54b68511fc8ea2ad15ddac510172c4ff460a80a265336440b0c9653d","src/codegen/helpers.rs":"65c3e7a79f93bcfee92028f00a380e747d95f0726323e0f6a3dfb4ede8a7f1a1","src/codegen/impl_debug.rs":"871f18fc2bd7bad4ae0ce8736ac6ac196b35c72ef70cc6ad68f3e30963e634fd","src/codegen/impl_partialeq.rs":"6c745da208b18946ecde725cef482c47331a88858787f916c4cc74692e2952b7","src/codegen/mod.rs":"20db73c0f6569d9743e4de66cb0c19a3616f3737dca582b05f82e3d22c2113fa","src/codegen/struct_layout.rs":"25926bc79edaf2d432e17764eadd97c94fb46393882efe43a7e37cc6705bae75","src/deps.rs":"de4a91d1d252295e1abaf4ab1f90f7be618c67649edb12081c3a501e61398a75","src/extra_assertions.rs":"494534bd4f18b80d89b180c8a93733e6617edcf7deac413e9a73fd6e7bc9ced7","src/features.rs":"25fdcc67539d27a2664c673c8225df9da43520efcc995185f66d46bf3fc14c71","src/ir/analysis/derive.rs":"58be29c92fc7f6edd061d5ce55ad3b3efe6da70b548e78a8cdd0f30d78dabc09","src/ir/analysis/has_destructor.rs":"2b280ae2af37a9f1165e40bf091da2ff6d1fa521bad8a9dd2d6c056ab38e6e00","src/ir/analysis/has_float.rs":"58ea1e38a59ef208400fd65d426cb5b288949df2d383b3a194fa01b99d2a87fa","src/ir/analysis/has_type_param_in_array.rs":"d1b9eb119dc14f662eb9bd1394c859f485479e4912589709cdd33f6752094e22","src/ir/analysis/has_vtable.rs":"c99eb78232280a710e330c888d757cb44bcc55145a0981ed57cdd0a383700129","src/ir/analysis/mod.rs":"f3f6538daab337fd51f3073f7e4fa95d31d06716e059adf0fdc3f728abd20c30","src/ir/analysis/sizedness.rs":"0e46879a6c4b75cf3f63946bd4805d65fed24c561f86d16d0ef68fe5db42a379","src/ir/analysis/template_params.rs":"b574a329fd9b05fcf86bc857f6cadfd6ef89244007017b8f879bce6ccbf70768","src/ir/annotations.rs":"1c931d7bbba1e1613e9cccaab58d14f75e79b831b5c881e41f5b5257a9cbced7","src/ir/comment.rs":"31d64a49ae3d9c3c348fa2539e03306ca3a23fae429cab452e42b31ecf632145","src/ir/comp.rs":"64f5879e44191082e2f3fcda28506ac0d253405de4041d002ee458678b316f5b","src/ir/context.rs":"82fe3effd7238a9302bc815bb25ae30eaea40ce44dcde569264bb6ee136dfd0d","src/ir/derive.rs":"e5581852eec87918901a129284b4965aefc8a19394187a8095779a084f28fabe","src/ir/dot.rs":"2d79d698e6ac59ce032840e62ff11103abed1d5e9e700cf383b492333eeebe1f","src/ir/enum_ty.rs":"5c861f09432cebf8d59f561c4c6f59cf6360b202c81e69b14fb40cb4a3716be1","src/ir/function.rs":"1e95f185f6575cf38ace614e273011ff022c45aba346a8e929d2c41a7136f212","src/ir/int.rs":"68a86182743ec338d58e42203364dc7c8970cb7ec3550433ca92f0c9489b4442","src/ir/item.rs":"05f0d441d6dac715c0c53c68dd67dfa2829027db805537ef4df888237081f403","src/ir/item_kind.rs":"7666a1ff1b8260978b790a08b4139ab56b5c65714a5652bbcec7faa7443adc36","src/ir/layout.rs":"755e3787c262de434a53a8c326f0e825f95415ed6b0f925c1cddf208ca8e3bc4","src/ir/mod.rs":"713cd537434567003197a123cbae679602c715e976d22f7b23dafd0826ea4c70","src/ir/module.rs":"70cf6ddfeabe6cdc13fdc767c783216c073404848d827e85fc6c2de3a19b5c3f","src/ir/objc.rs":"195fb2a3e4371b90244f3a8f295fd80cc77e0f2daf8fd27e3d8e5b78bd6b55d6","src/ir/template.rs":"0f19fba602f9b6a3da9a0dcd6a0653129234866d24f71c4713aad8d2e635b90f","src/ir/traversal.rs":"b1ca0cd37e02211fb6d1d13a9c8d0aa5b74f9ccfb7f5e87d86a6e1fa0fcb00e1","src/ir/ty.rs":"25446374e591ce7510f7afdf7c768feaece50a4d2dc5a483a3179d41617a784a","src/ir/var.rs":"da0bc3d26d3b5da4d6cff270a98c6c14922a087f05e66b221b65848c4f6b3c5b","src/lib.rs":"c47ba40f0b6feada5d7baf091c535c19e199afc7b5346461d9eab6278220e5ab","src/log_stubs.rs":"7f33c9ea10b24f610b82ca3c2bc0f88ae9a5bf742414e6ad8b9dfea7b0b16ad9","src/main.rs":"74e582c37b146090332b1496f5b4bca02c7629d03a4ae40302cb4a723f08e445","src/options.rs":"4dff3a8e1d039c6f53a20141adf1ed86fba4049ce89d39d4897966ec11b18101","src/parse.rs":"4ffc54415eadb622ee488603862788c78361ef2c889de25259441a340c2a010f","src/regex_set.rs":"6c46357fb1ee68250e5e017cbf691f340041489ae78599eee7a5665a6ddce27f","src/time.rs":"8efe317e7c6b5ba8e0865ce7b49ca775ee8a02590f4241ef62f647fa3c22b68e"},"package":"453c49e5950bb0eb63bb3df640e31618846c89d5b7faa54040d76e98e0134375"}
diff -Nru solana-1.13.7.a/vendor/bindgen/src/clang.rs solana-1.13.7.b/vendor/bindgen/src/clang.rs
--- solana-1.13.7.a/vendor/bindgen/src/clang.rs	2023-03-30 04:41:10.000000000 +0200
+++ solana-1.13.7.b/vendor/bindgen/src/clang.rs	2023-04-19 00:54:24.574925149 +0200
@@ -54,6 +54,11 @@
         unsafe { clang_isDeclaration(self.kind()) != 0 }
     }
 
+    /// Is this cursor's referent an anonymous record or so?
+    pub fn is_anonymous(&self) -> bool {
+        unsafe { clang_Cursor_isAnonymous(self.x) != 0 }
+    }
+
     /// Get this cursor's referent's spelling.
     pub fn spelling(&self) -> String {
         unsafe { cxstring_into_string(clang_getCursorSpelling(self.x)) }
diff -Nru solana-1.13.7.a/vendor/bindgen/src/ir/comp.rs solana-1.13.7.b/vendor/bindgen/src/ir/comp.rs
--- solana-1.13.7.a/vendor/bindgen/src/ir/comp.rs	2023-03-30 04:41:10.000000000 +0200
+++ solana-1.13.7.b/vendor/bindgen/src/ir/comp.rs	2023-04-19 00:56:10.909476003 +0200
@@ -1414,8 +1414,7 @@
 
                     // A declaration of an union or a struct without name could
                     // also be an unnamed field, unfortunately.
-                    if cur.spelling().is_empty() &&
-                        cur.kind() != CXCursor_EnumDecl
+                    if cur.is_anonymous() && cur.kind() != CXCursor_EnumDecl
                     {
                         let ty = cur.cur_type();
                         let public = cur.public_accessible();
diff -Nru solana-1.13.7.a/vendor/bindgen/src/ir/ty.rs solana-1.13.7.b/vendor/bindgen/src/ir/ty.rs
--- solana-1.13.7.a/vendor/bindgen/src/ir/ty.rs	2023-03-30 04:41:10.000000000 +0200
+++ solana-1.13.7.b/vendor/bindgen/src/ir/ty.rs	2023-04-19 01:02:38.149482094 +0200
@@ -736,7 +736,12 @@
 
         let layout = ty.fallible_layout(ctx).ok();
         let cursor = ty.declaration();
-        let mut name = cursor.spelling();
+        let is_anonymous = cursor.is_anonymous();
+        let mut name = if is_anonymous {
+            None
+        } else {
+            Some(cursor.spelling()).filter(|n| !n.is_empty())
+        };
 
         debug!(
             "from_clang_ty: {:?}, ty: {:?}, loc: {:?}",
@@ -770,7 +775,7 @@
             if is_canonical_objcpointer && is_template_type_param {
                 // Objective-C generics are just ids with fancy name.
                 // To keep it simple, just name them ids
-                name = "id".to_owned();
+                name = Some("id".to_owned());
             }
         }
 
@@ -899,7 +904,7 @@
                                         return Err(ParseError::Recurse);
                                     }
                                 } else {
-                                    name = location.spelling();
+                                    name = Some(location.spelling());
                                 }
 
                                 let complex = CompInfo::from_ty(
@@ -941,7 +946,7 @@
                                                 CXType_Typedef
                                             );
 
-                                            name = current.spelling();
+                                            name = Some(location.spelling());
 
                                             let inner_ty = cur
                                                 .typedef_type()
@@ -1125,10 +1130,10 @@
                 CXType_Enum => {
                     let enum_ = Enum::from_ty(ty, ctx).expect("Not an enum?");
 
-                    if name.is_empty() {
+                    if !is_anonymous {
                         let pretty_name = ty.spelling();
                         if clang::is_valid_identifier(&pretty_name) {
-                            name = pretty_name;
+                            name = Some(pretty_name);
                         }
                     }
 
@@ -1143,12 +1148,12 @@
                     )
                     .expect("Not a complex type?");
 
-                    if name.is_empty() {
+                    if !is_anonymous {
                         // The pretty-printed name may contain typedefed name,
                         // but may also be "struct (anonymous at .h:1)"
                         let pretty_name = ty.spelling();
                         if clang::is_valid_identifier(&pretty_name) {
-                            name = pretty_name;
+                            name = Some(pretty_name);
                         }
                     }
 
@@ -1188,7 +1193,9 @@
                 CXType_ObjCClass | CXType_ObjCInterface => {
                     let interface = ObjCInterface::from_ty(&location, ctx)
                         .expect("Not a valid objc interface?");
-                    name = interface.rust_name();
+                    if !is_anonymous {
+                        name = Some(interface.rust_name());
+                    }
                     TypeKind::ObjCInterface(interface)
                 }
                 CXType_Dependent => {
@@ -1206,7 +1213,7 @@
             }
         };
 
-        let name = if name.is_empty() { None } else { Some(name) };
+        name = name.filter(|n| !n.is_empty());
 
         let is_const = ty.is_const() ||
             (ty.kind() == CXType_ConstantArray &&
